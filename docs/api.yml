openapi: "3.0.2"
info:
  title: Racetaurant API
  version: "1.0"
servers:
  - url: http://localhost/api/
paths:
  /restaurants:
    parameters:
      - in: query
        name: start
        schema:
          type: integer
          minimum: 0
          default: 0
          example: 150
        description: The first restaurant to return
      - in: query
        name: limit
        schema:
          type: integer
          minimum: 0
          maximum: 200
          default: 50
        description: The number of restaurants to return
      - in: query
        name: price
        schema:
          $ref: "#/components/schemas/priceCategory"
      - in: query
        name: latitude
        schema:
          type: number
      - in: query
        name: longitude
        schema:
          type: number
      - in: query
        name: radius
        description: Radius around latitude and longitude in km
        schema:
          type: number
      - in: query
        name: cuisines
        schema:
          type: array
          items:
            $ref: "#/components/schemas/cuisineType"
      - in: query
        name: rating_min
        schema:
          type: number
          default: 0
          minimum: 0
          maximum: 5
      - in: query
        name: rating_max
        schema:
          type: number
          default: 5
          minimum: 0
          maximum: 5
      - in: query
        name: time_start
        description: The ISO 8601 timestamp when a free table should be available
        schema:
          type: string
          example: "2022-05-16T18:25:39+00:00"
      - in: query
        name: time_stop
        description: The ISO 8601 timestamp until a free table should be available
        schema:
          type: string
          example: "2022-05-16T20:25:39+00:00"
      - in: query
        name: persons
        description: The number of persons that should have space at a table
        schema:
          type: integer
          default: 1
          minimum: 1
      - in: query
        name: order
        description: The order the results should be in
        schema:
          type: string
          default: id
          enum:
            - id
            - name
            - rating
            - price
      - in: query
        name: asc
        description: Whether the order should be ascending
        schema:
          type: boolean
          default: false
    get:
      responses:
        "200":
          description: A list of restaurants matching the filters
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Restaurant"
  /restaurants/{restaurantId}:
    parameters:
      - in: path
        name: restaurantId
        schema:
          type: string
        required: true
        description: ID of the restaurant to get
    get:
      responses:
        "200":
          description: The requested restaurant
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Restaurant"
        "404":
          description: The requested restaurant does not exist
  /restaurants/{restaurantId}/reviews:
    parameters:
      - in: path
        name: restaurantId
        schema:
          type: string
        required: true
        description: ID of the restaurant to get
      - in: query
        name: start
        schema:
          type: integer
          minimum: 0
          default: 0
          example: 150
        description: The first comment to return
      - in: query
        name: limit
        schema:
          type: integer
          minimum: 0
          maximum: 200
          default: 50
        description: The number of comments to return
    get:
      responses:
        "200":
          description: The requested comments ordered by time written
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Review"
        "404":
          description: The requested restaurant does not exist

components:
  schemas:
    Restaurant:
      type: object
      properties:
        id:
          type: string
          description: The restaurant ID
          example: EU40Q1WOAT
        name:
          type: string
          description: The restaurants name
          example: La Bella Italia
        website:
          type: string
          description: A URL to the restaurants website
          example: "https://la-bella-italia.de/home"
        rating:
          type: number
          description: The restaurants rating
          minimum: 0
          maximum: 5
          example: 4.35
        images:
          type: array
          description: URLs to the restaurants images
          items:
            type: string
            example: "/images/EU40Q1WOAT.png"
        priceCategory:
          $ref: "#/components/schemas/priceCategory"
        cuisines:
          type: array
          description: A list of cuisines the restaurants offers
          items:
            $ref: "#/components/schemas/cuisineType"
          example: [italian, german]
        location:
          type: object
          description: The location of the restaurant
          properties:
            latitude:
              type: number
              description: latitudeitude of the location
              example: 28.52473
            longitude:
              type: number
              description: longitudeitude of the location
              example: 45.28437
            address:
              type: string
              description: The street name and number of the restaurant
              example: Rumfordstra√üe 34
        layout:
          description: The layout of the tables in the restaurant
          $ref: "#/components/schemas/restaurantLayout"
        open:
          $ref: "#/components/schemas/openingTimes"
    priceCategory:
      type: integer
      description: The price category
      minimum: 0
      maximum: 2
      example: 0
    cuisineType:
      type: string
      enum:
        - balkan
        - asian
        - italian
        - german
        - indian
        - turkish
        - greek
        - american
      example: italian
    restaurantLayout:
      type: object
      description: The layout of the tables in the restaurant
    Review:
      type: object
      properties:
        title:
          type: string
          example: Liked the food
        content:
          type: string
          example: The food was good and the waiter was nice
        author:
          type: string
          example: Bob Rater
        rating:
          type: integer
          minimum: 0
          maximum: 5
          example: 5
    openingTimes:
      type: object
      description: The times the restaurant is open
      properties:
        monday:
          $ref: "#/components/schemas/openingTime"
        tuesday:
          $ref: "#/components/schemas/openingTime"
        wednesday:
          $ref: "#/components/schemas/openingTime"
        thursday:
          $ref: "#/components/schemas/openingTime"
        friday:
          $ref: "#/components/schemas/openingTime"
        saturday:
          $ref: "#/components/schemas/openingTime"
        sunday:
          $ref: "#/components/schemas/openingTime"
    openingTime:
      oneOf:
        - type: object
          description: The time the restaurant is open in its local time
          properties:
            from:
              type: string
              description: The time the restaurant opens in its local time
              example: "10:00"
            to:
              type: string
              description: The time the restaurant closes in its local time
              example: "23:30"
        - type: string
          description: The restaurant is closed that day
          example: closed
          enum:
            - closed
