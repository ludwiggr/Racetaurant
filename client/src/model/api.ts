import axios from "axios";
import Cuisine from "./cuisine";
import PriceCategory from "./priceCategory";
import Restaurant, { isRestaurant, isRestaurantArray } from "./restaurant";
import Review, { isReviewArray } from "./review";
import qs from 'qs';

axios.defaults.paramsSerializer = params => {
    return qs.stringify(params, { arrayFormat: 'repeat', /* param = [value1, value2] -> param=value1&param=value2 */ });
};

/**
 * The options {@link Restaurant}s can be filtered by
 */
export type FilterOptions = {
    /**
     * The price category of the restaruants
     */
    price?: PriceCategory,
    /**
     * The longitude to search around
     */
    latitude?: number,
    /**
     * The latitude to search around
     */
    longitude?: number,
    /**
     * How far away the restaurant is allowed to be from the position given by latitude and longitude
     */
    radius?: number,
    /**
     * The cuisines the restaurant should offer at minimum
     */
    cuisines?: Array<Cuisine>,
    /**
     * The minimum rating the restaurant should have
     */
    rating_min?: number,
    /**
     * The maximum rating the restaurant should have
     */
    rating_max?: number,
    /**
     * The start of the time slot at which the restaurant should have a free table available
     */
    time_start?: Date,
    /**
     * The end of the time slot at which the restaurant should have a free table available
     */
    time_stop?: Date,
    /**
     * The number of persons the restaurant should be able to accommodate in the selected time slot
     */
    persons?: number,
}

/**
 * An Error that is generated by this API
 */
export type APIError = {
    /**
     * A short (human readable) description of the error
     */
    message: string,
    /**
     * A supplemental value (e.g. a passed on error object)
     */
    supplemental?: any
}

/**
 * Checks if an object is an {@link APIError}
 * @param apiError the object to check
 * @returns `true` if the given value is an {@link APIError}, `false` otherwise
 */
export const isAPIError = (apiError: any): apiError is APIError => {
    return (typeof apiError === "object") && (typeof apiError.message === "string");
}

/**
 * A shorthand for converting axios errors to {@link APIError}s
 */
const axios_catch = (reject: (error: any) => void) => (error: any) => {
    reject({
        message: "API request failed",
        supplemental: error
    });
};

/**
 * Gets multiple restaurants matching a filter with a order
 * @param filter the filter the restaurants should match
 * @param start the number of the first restaurant to get for pagination
 * @param limit the number of restaurants to get for pagination
 * @param order the order the restaurants should be in (for pagination)
 * @param asc if the order should be ascending or descending
 * @returns a promise that resolves with an array of {@link Restaurant}s or throws an {@link APIError} if anything fails
 * @see FilterOptions
 */
const getRestaurants = (filter?: FilterOptions, start?: number, limit?: number, order?: "id" | "name" | "rating", asc?: boolean): Promise<Array<Restaurant>> => {
    return new Promise((resolve, reject) => {
        axios.get("/api/restaurants", {
            params: { ...filter, start: start, limit: limit, order: order, asc: asc }
        }).then(result => {
            if (isRestaurantArray(result.data))
                resolve(result.data);
            reject({
                message: "API did not return an array of restaurants",
                supplemental: result.data
            });
        }).catch(axios_catch(reject));
    });
}

/**
 * Gets a restaurant by id
 * @param id the id of the restaurant to get
 * @returns a promise that resolves with the {@link Restaurant} or throws an {@link APIError} if anything fails
 */
const getRestaurantById = (id: string): Promise<Restaurant> => {
    return new Promise((resolve, reject) => {
        axios.get(`/api/restaurants/${encodeURIComponent(id)}`).then(result => {
            if (isRestaurant(result.data))
                resolve(result.data);
            reject({
                message: "API did not return a restaurant",
                supplemental: result.data
            });
        }).catch(axios_catch(reject));
    });
}

/**
 * Gets a restaurants reviews
 * @param id the id of the restaurant to get reviews for
 * @returns a promise that resolves with an array of {@link Review}s or throws an {@link APIError} if anything fails
 */
const getReviews = (id: string): Promise<Array<Review>> => {
    return new Promise((resolve, reject) => {
        axios.get(`/api/restaurants/${encodeURIComponent(id)}/reviews`).then(result => {
            if (isReviewArray(result.data))
                resolve(result.data);
            reject({
                message: "API did not return an array of reviews",
                supplemental: result.data
            });
        }).catch(axios_catch(reject));
    })
}

export { getRestaurants, getRestaurantById, getReviews };
